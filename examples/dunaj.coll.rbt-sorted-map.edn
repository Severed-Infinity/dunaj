{nil
 "(ns foo.bar
  (:api dunaj)
  (:require [dunaj.string :refer [lower-case]]))

(->sorted-map :b 1 :a 2 :c 3)
;;=> {:a 2, :b 1, :c 3}

(config (->sorted-map :b 1 :a 2 :c 3))
;;=> {:comparator #<DefaultComparator clojure.lang.RT$DefaultComparator@5d1d396d>}

(defn custom-comparator :- Integer
  \"Returns a case insensitive comparator for named objects.\"
  [x :- INamed, y :- INamed]
  (compare (lower-case (name x)) (lower-case (name y))))
;;=> #'foo.bar/custom-comparator

(->sorted-map :b 1 :a 2 :C 3)
;;=> {:C 3, :a 2, :b 1}

(->sorted-map-by custom-comparator :b 1 :a 2 :C 3)
;;=> {:a 2, :b 1, :C 3}

(flip (->sorted-map :b 1 :a 2 :c 3))
;;=> {:c 3, :b 1, :a 2}

(def v (range 128))
;;=> #'foo.bar/v

(def m (sorted-zipmap (map (comp keyword ->str char) v) v))
;;=> #'foo.bar/m

(ascending? m)
;;=> true

(section m :a :z)
;;=> ([:a 97] [:b 98] [:c 99] [:d 100] [:e 101] [:f 102] [:g 103] [:h 104] [:i 105] [:j 106] [:k 107] [:l 108] [:m 109] [:n 110] [:o 111] [:p 112] [:q 113] [:r 114] [:s 115] [:t 116] [:u 117] [:v 118] [:w 119] [:x 120] [:y 121])"}
