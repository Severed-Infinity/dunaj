{nil
 "(ns foo.baz
  (:api dunaj)
  (:require [dunaj.env :refer [with-meta host-newline]]))

;; printing

(def x ^:foo [1 nil {:foo 'bar} \"d\\\\\\n\" :f])

;; similar to clojure.core/pr
(pr! x)
;; [1 nil {:foo bar} \"d\\\\\\n\" :f]
;;=> nil

;; similar to clojure.core/pr-str
(str (print-one clj x))
;;=> \"[1 nil {:foo bar} \\\"d\\\\\\\\\\\\n\\\" :f]\"

;; similar to clojure.core/print
(print! x)
;; [1 nil {:foo bar} d\\
;;  :f]
;;=> nil

;; similar to clojure.core/print-str
(str (print-one (assoc clj :human-printer? true) x))
;;=> \"[1 nil {:foo bar} d\\\\\\n :f]\"

;; similar to clojure.core/println
(println! x)
;; [1 nil {:foo bar} d\\
;;  :f]
;;
;;=> nil

;; similar to clojure.core/println-str
(str (append host-newline (print-one (assoc clj :human-printer? true) x)))
;;=> \"[1 nil {:foo bar} d\\\\\\n :f]\\n\"

;; similar to clojure.core/prn
(prn! x)
;; [1 nil {:foo bar} \"d\\\\\\n\" :f]
;;
;;=> nil

;; similar to clojure.core/prn-str
(str (append host-newline (print-one clj x)))
;;=> \"[1 nil {:foo bar} \\\"d\\\\\\\\\\\\n\\\" :f]\\n\"

;; similar to clojure.core/printf
(out! (print \"%d-%s\" 5 \"foo\"))
;; 5-foo
;;=> 5

(with-meta (pp! x))
;; ^{:foo true} [1 nil {:foo bar} \"d\\\\\\n\" :f]
;;=> nil\""}
